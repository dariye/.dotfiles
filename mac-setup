#!/bin/bash
# Optimized for M3 MacBook Pro
# Based on Thoughtbot's laptop script and original setup

# Constants
HOMEBREW_PREFIX="/opt/homebrew"
ASDF_HOME="$HOME/.asdf"
XDG_CONFIG_HOME="$HOME/.config"

# Improved error handling
set -euo pipefail
IFS=$'\n\t'

fancy_echo() {
  local fmt="$1"; shift
  printf "\\n%b\\n" "$fmt"
}

# Verify M3/ARM architecture
if [ "$(uname -m)" != "arm64" ]; then
  fancy_echo "‚ö†Ô∏è  This script is optimized for Apple Silicon (M-series) Macs"
  exit 1
fi

if [ "$(sw_vers -productVersion | cut -d. -f1)" -lt "14" ]; then
  fancy_echo "‚ö†Ô∏è  This script requires macOS Sonoma (14.0) or later"
  exit 1
fi

# Create necessary directories
mkdir -p "$HOME/.bin"
mkdir -p "$XDG_CONFIG_HOME"

# Homebrew setup with proper permissions
if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$USER:admin" "$HOMEBREW_PREFIX"
  fi
else
  sudo mkdir -p "$HOMEBREW_PREFIX"
  sudo chown -R "$USER:admin" "$HOMEBREW_PREFIX"
fi

# Install Homebrew if needed
if ! command -v brew >/dev/null; then
  fancy_echo "üç∫ Installing Homebrew..."
  NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi

# Install Xcode Command Line Tools
if ! xcode-select -p &>/dev/null; then
  fancy_echo "Installing Xcode Command Line Tools..."
  xcode-select --install

  # Wait for installation to complete
  until xcode-select -p &>/dev/null; do
    sleep 5
  done
fi

clean_asdf_installation() {
  fancy_echo "üßπ Cleaning existing ASDF installation..."

  # Remove existing ASDF directory if it exists
  if [ -d "$ASDF_HOME" ]; then
    rm -rf "$ASDF_HOME"
  fi

  # Ensure clean ASDF installation
  brew uninstall asdf --force 2>/dev/null || true
  brew install asdf

  # Create fresh ASDF directory
  mkdir -p "$ASDF_HOME"

  # Source ASDF
  # source "$(brew --prefix asdf)/libexec/asdf.sh"
}

# ASDF Plugin Management with cleanup
add_or_install_asdf_plugin() {
  local name="$1"
  local url="$2"
  local plugin_dir="$ASDF_HOME/plugins/$name"

  # Clean existing plugin if present
  if [ -d "$plugin_dir" ]; then
    rm -rf "$plugin_dir"
  fi

  fancy_echo "üîå Installing $name plugin..."
  asdf plugin add "$name" "$url"
}

# Optimized language installation
install_asdf_language() {
  local language="$1"
  local version

  if [ "$2" = "latest" ]; then
    version="$(asdf latest "$language")"
  else
    version="$2"
  fi

  if ! asdf list "$language" 2>/dev/null | grep -Fq "$version"; then
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  fi
}

# Update Homebrew and install packages
fancy_echo "üçª Updating Homebrew formulae..."
brew update
brew bundle --file=./Brewfile

# Configure fish shell
fancy_echo "üê† Setting up fish shell..."
if ! grep -q "$HOMEBREW_PREFIX/bin/fish" /etc/shells; then
  echo "$HOMEBREW_PREFIX/bin/fish" | sudo tee -a /etc/shells
fi
chsh -s "$HOMEBREW_PREFIX/bin/fish"

# ASDF setup
fancy_echo "Setting up asdf package manager..."

# Clean and reinstall ASDF
clean_asdf_installation
# Install language versions
add_or_install_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
add_or_install_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"
add_or_install_asdf_plugin "python" "https://github.com/danhper/asdf-python.git"
add_or_install_asdf_plugin "rust" "https://github.com/code-lever/asdf-rust.git"
add_or_install_asdf_plugin "pnpm" "https://github.com/jonathanmorley/asdf-pnpm.git"

# Install latest versions of languages
install_asdf_language "ruby" "latest"
install_asdf_language "nodejs" "latest"
install_asdf_language "python" "3.11.7"
install_asdf_language "rust" "latest"
install_asdf_language "pnpm" "latest"

fancy_echo "‚úÖ Setup complete!"
